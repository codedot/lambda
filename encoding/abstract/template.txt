\apply[a, b] {
	/* Apply beta reduction. */
	++this.beta;
	++this.total;
} \lambda[a, b];

\apply[
	\fan_{[i[0], i[1] + 1]}(a, b),
	\fan_{[i[0], i[1] + 1]}(c, d)
] {
	/* Duplicate application. */
	++this.total;
} \fan_{i}[\apply(a, c), \apply(b, d)];

\fan_{i}[\lambda(a, b), \lambda(c, d)] {
	/* Duplicate abstraction. */
	++this.total;
} \lambda[
	\fan_{[i[0], i[1] + 1]}(a, c),
	\fan_{[i[0], i[1] + 1]}(b, d)
];

\fan_{i}[
	\fan_{[j[0], j[1] + 1]}(a, b),
	\fan_{[j[0], j[1] + 1]}(c, d)
] {
	/* Duplicate different fans. */
	if ((i[0] != j[0]) && (i[1] < j[1]))
		++this.total;
	else
		return false;
} \fan_{j}[
	\fan_{[this.plus(i[0], j[0]), i[1]]}(a, c),
	\fan_{[this.minus(i[0], j[0]), i[1]]}(b, d)
];

\fan_{i}[a, b] {
	/* Annihilate matching fans. */
	if ((i[0] == j[0]) || (i[1] == j[1]))
		++this.total;
	else
		return false;
} \fan_{j}[a, b];

\read_{C}[\fan_{i}(a, b)] {
	/* Duplicate context. */
	++this.total;
} \fan_{i}[\read_{C}(a), \read_{this.clone(C)}(b)];

\print {
	/* Output results of read-back. */
	this.nf = M;
	++this.total;
} \atom_{M};

\read_{C}[a] {
	/* Read back abstraction. */
	++this.total;
} \lambda[\atom_{this.mkid()}, \read_{this.abst(C)}(a)];

\apply[\read_{this.appl(M)}(a), a] {
	/* Read back application. */
	++this.total;
} \atom_{M};

\read_{C}[\atom_{this.atom(C, M)}] {
	/* Read back an atom. */
	++this.total;
} \atom_{M};

\fan_{i}[\atom_{M}, \atom_{M}] {
	/* Duplicate an atom. */
	++this.total;
} \atom_{M};

$$

INCONFIG

$$

READBACK

const table = [];
let last = 0;

function uniq()
{
	let fresh = ++last;

	fresh = fresh.toString();
	fresh = hash(fresh);
	return [fresh, 1];
}

function cons(s, a, b)
{
	return hash(a + s + b);
}

function mktable()
{
	for (let n = 0; n < 256; n++) {
		let c = n;

		for (let k = 0; k < 8; k++) {
			if (c & 1)
				c = 0xEDB88320 ^ (c >>> 1);
			else
				c = c >>> 1;
		}

		table[n] = c;
	}
}

function hash(str)
{
	const n = str.length;
	let crc = 0 ^ (-1);

	for (let i = 0; i < n; i++) {
		const b = str.charCodeAt(i);

		crc = (crc >>> 8) ^ table[(crc ^ b) & 0xFF];
	}

	return (crc ^ (-1)) >>> 0;
}

mktable();

this.plus = cons.bind(this, "+");
this.minus = cons.bind(this, "-");
this.uniq = uniq;
this.beta = 0;
this.total = 0;
