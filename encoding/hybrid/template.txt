\app_{i}[\fan_{j}(a, b), \fan_{j}(c, d)] {
	/* Duplicate application. */
	if (j[0] < i)
		++this.total;
	else
		return false;
} \fan_{j}[\app_{i}(a, c), \app_{i + j[1]}(b, d)];

\fan_{i}[\lam_{j}(a, b), \lam_{j + i[1]}(c, d)] {
	/* Duplicate abstraction. */
	if (i[0] < j)
		++this.total;
	else
		return false;
} \lam_{j}[\fan_{i}(a, c), \fan_{i}(b, d)];

\fan_{i}[a, b] {
	/* Annihilate matching fans. */
	if (i[0] == j[0])
		++this.total;
	else
		return false;
} \fan_{j}[a, b];

\fan_{i}[\fan_{j}(a, b), \fan_{[j[0] + i[1], j[1]]}(c, d)] {
	/* Duplicate different fans. */
	if (i[0] < j[0])
		++this.total;
	else
		return false;
} \fan_{j}[\fan_{i}(a, c), \fan_{i}(b, d)];

\app_{i}[a, b] {
	/* Apply beta reduction. */
	if (i == j)
		++this.beta, ++this.total;
	else
		return false;
} \lam_{j}[a, b];

\fan_{i}[\atom_{M}, \atom_{M}] {
	/* Duplicate an atom. */
	++this.total;
} \atom_{M};

\read_{C}[\fan_{i}(a, b)] {
	/* Duplicate context. */
	++this.total;
} \fan_{i}[\read_{C}(a), \read_{this.clone(C)}(b)];

\print {
	/* Output results of read-back. */
	this.nf = M;
	++this.total;
} \atom_{M};

\read_{C}[a] {
	/* Read back abstraction. */
	++this.total;
} \lam_{i}[\atom_{this.mkid()}, \read_{this.abst(C)}(a)];

\app_{i}[\read_{this.appl(M)}(a), a] {
	/* Read back application. */
	++this.total;
} \atom_{M};

\read_{C}[\atom_{this.atom(C, M)}] {
	/* Read back an atom. */
	++this.total;
} \atom_{M};

$$

INCONFIG

$$

READBACK

this.beta = 0;
this.total = 0;
